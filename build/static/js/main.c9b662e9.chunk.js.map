{"version":3,"sources":["CandyMachine/index.js","CountdownTimer/index.js","assets/twitter-logo.svg","App.js","index.js","CandyMachine/helpers.js"],"names":["programs","metadata","Metadata","MetadataProgram","config","web3","PublicKey","process","REACT_APP_CANDY_MACHINE_CONFIG","SystemProgram","opts","CandyMachine","walletAddress","useState","machineStats","setMachineStats","mints","setMints","isMinting","setIsMinting","isLoadingMints","setIsLoadingMints","fetchHashTable","hash","metadataEnabled","a","connection","Connection","REACT_APP_SOLANA_RPC_HOST","getProgramAccounts","filters","memcmp","offset","bytes","metadataAccounts","mintHashes","index","length","account","getParsedAccountInfo","pubkey","accountInfo","toString","value","push","data","mint","getMetadata","findProgramAddress","Buffer","from","TOKEN_METADATA_PROGRAM_ID","toBuffer","getMasterEdition","getTokenWallet","wallet","TOKEN_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","mintToken","Keypair","generate","publicKey","token","masterEdition","rpcHost","getMinimumBalanceForRentExemption","MintLayout","span","rent","accounts","candyMachine","REACT_APP_CANDY_MACHINE_ID","payer","REACT_APP_TREASURY_ADDRESS","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","programId","SYSVAR_RENT_PUBKEY","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createAssociatedTokenAccountInstruction","createMintToInstruction","provider","getProvider","Program","fetchIdl","candyMachineProgram","idl","program","rpc","mintNft","txn","console","log","onSignatureWithOptions","notification","context","type","result","err","getCandyMachineState","commitment","message","msg","code","indexOf","warn","associatedTokenAddress","splTokenMintAddress","keys","isSigner","isWritable","TransactionInstruction","useEffect","Provider","window","solana","fetch","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveData","goLiveDate","goLiveDateTimeString","Date","toGMTString","uri","response","json","parse","find","image","prevState","className","currentDate","dropDate","renderDropTimer","onClick","disabled","map","src","alt","CountdownTimer","timerString","setTimerString","interval","setInterval","getTime","distance","days","Math","floor","hours","minutes","seconds","clearInterval","TWITTER_HANDLE","TWITTER_LINK","App","setWalletAddress","checkIfWalletIsConnected","isPhantom","connect","onlyIfTrusted","alert","error","connectWallet","onLoad","addEventListener","removeEventListener","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9b662e9.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { programs } from '@metaplex/js';\nimport './CandyMachine.css';\nimport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './helpers';\nimport CountdownTimer from '../CountdownTimer';\n\nconst {\n  metadata: { Metadata, MetadataProgram },\n} = programs;\n\nconst config = new web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_CONFIG);\nconst { SystemProgram } = web3;\nconst opts = {\n  preflightCommitment: 'processed',\n};\n\nconst MAX_NAME_LENGTH = 32;\nconst MAX_URI_LENGTH = 200;\nconst MAX_SYMBOL_LENGTH = 10;\nconst MAX_CREATOR_LEN = 32 + 1 + 1;\n\nconst CandyMachine = ({ walletAddress }) => {\n  // State\n  const [machineStats, setMachineStats] = useState(null);\n  const [mints, setMints] = useState([]);\n  // Add these two state properties\n  const [isMinting, setIsMinting] = useState(false);\n  const [isLoadingMints, setIsLoadingMints] = useState(false);\n\n  // Actions\n  const fetchHashTable = async (hash, metadataEnabled) => {\n    const connection = new web3.Connection(\n      process.env.REACT_APP_SOLANA_RPC_HOST\n    );\n\n    const metadataAccounts = await MetadataProgram.getProgramAccounts(\n      connection,\n      {\n        filters: [\n          {\n            memcmp: {\n              offset:\n                1 +\n                32 +\n                32 +\n                4 +\n                MAX_NAME_LENGTH +\n                4 +\n                MAX_URI_LENGTH +\n                4 +\n                MAX_SYMBOL_LENGTH +\n                2 +\n                1 +\n                4 +\n                0 * MAX_CREATOR_LEN,\n              bytes: hash,\n            },\n          },\n        ],\n      }\n    );\n\n    const mintHashes = [];\n\n    for (let index = 0; index < metadataAccounts.length; index++) {\n      const account = metadataAccounts[index];\n      const accountInfo = await connection.getParsedAccountInfo(account.pubkey);\n      const metadata = new Metadata(hash.toString(), accountInfo.value);\n      if (metadataEnabled) mintHashes.push(metadata.data);\n      else mintHashes.push(metadata.data.mint);\n    }\n\n    return mintHashes;\n  };\n\n  const getMetadata = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getMasterEdition = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n          Buffer.from('edition'),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getTokenWallet = async (wallet, mint) => {\n    return (\n      await web3.PublicKey.findProgramAddress(\n        [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const mintToken = async () => {\n    try {\n      setIsMinting(true);\n      const mint = web3.Keypair.generate();\n      const token = await getTokenWallet(\n        walletAddress.publicKey,\n        mint.publicKey\n      );\n      const metadata = await getMetadata(mint.publicKey);\n      const masterEdition = await getMasterEdition(mint.publicKey);\n      const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n      const connection = new Connection(rpcHost);\n      const rent = await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span\n      );\n\n      const accounts = {\n        config,\n        candyMachine: process.env.REACT_APP_CANDY_MACHINE_ID,\n        payer: walletAddress.publicKey,\n        wallet: process.env.REACT_APP_TREASURY_ADDRESS,\n        mint: mint.publicKey,\n        metadata,\n        masterEdition,\n        mintAuthority: walletAddress.publicKey,\n        updateAuthority: walletAddress.publicKey,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n        clock: web3.SYSVAR_CLOCK_PUBKEY,\n      };\n\n      const signers = [mint];\n      const instructions = [\n        web3.SystemProgram.createAccount({\n          fromPubkey: walletAddress.publicKey,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports: rent,\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          walletAddress.publicKey,\n          walletAddress.publicKey\n        ),\n        createAssociatedTokenAccountInstruction(\n          token,\n          walletAddress.publicKey,\n          walletAddress.publicKey,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          token,\n          walletAddress.publicKey,\n          [],\n          1\n        ),\n      ];\n\n      const provider = getProvider();\n      const idl = await Program.fetchIdl(candyMachineProgram, provider);\n      const program = new Program(idl, candyMachineProgram, provider);\n\n      const txn = await program.rpc.mintNft({\n        accounts,\n        signers,\n        instructions,\n      });\n\n      console.log('txn:', txn);\n\n      // Setup listener\n      connection.onSignatureWithOptions(\n        txn,\n        async (notification, context) => {\n          if (notification.type === 'status') {\n            console.log('Receievd status event');\n\n            const { result } = notification;\n            if (!result.err) {\n              console.log('NFT Minted!');\n              setIsMinting(false);\n              await getCandyMachineState();\n            }\n          }\n        },\n        { commitment: 'processed' }\n      );\n    } catch (error) {\n      let message = error.msg || 'Minting failed! Please try again!';\n\n      setIsMinting(false);\n\n      if (!error.msg) {\n        if (error.message.indexOf('0x138')) {\n        } else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      console.warn(message);\n    }\n  };\n\n  const createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress,\n    payer,\n    walletAddress,\n    splTokenMintAddress\n  ) => {\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n      { pubkey: walletAddress, isSigner: false, isWritable: false },\n      { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n    return new web3.TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([]),\n    });\n  };\n\n  useEffect(() => {\n    getCandyMachineState();\n  // eslint-disable-next-line\n  }, []);\n\n  const getProvider = () => {\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n    // Create a new connection object\n    const connection = new Connection(rpcHost);\n    \n    // Create a new Solana provider object\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n  \n    return provider;\n  };\n\n  // Declare getCandyMachineState as an async method\n  const getCandyMachineState = async () => { \n    const provider = getProvider();\n    const idl = await Program.fetchIdl(candyMachineProgram, provider);\n    const program = new Program(idl, candyMachineProgram, provider);\n    const candyMachine = await program.account.candyMachine.fetch(\n      process.env.REACT_APP_CANDY_MACHINE_ID\n    );\n    \n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const goLiveData = candyMachine.data.goLiveDate.toNumber();\n  \n    const goLiveDateTimeString = `${new Date(\n      goLiveData * 1000\n    ).toGMTString()}`\n  \n    // Add this data to your state to render\n    setMachineStats({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n    });\n  \n    console.log({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n    });\n\n    setIsLoadingMints(true);\n\n    const data = await fetchHashTable(\n      process.env.REACT_APP_CANDY_MACHINE_ID,\n      true\n    );\n    \n    if (data.length !== 0) {\n      for (const mint of data) {\n        // Get URI\n        const response = await fetch(mint.data.uri);\n        const parse = await response.json();\n        console.log(\"Past Minted NFT\", mint)\n    \n        // Fancy JS to avoid adding the same mint twice.\n        if (!mints.find((mint) => mint === parse.image)) {\n          setMints((prevState) => [...prevState, parse.image]);\n        }\n      }\n    }\n\n    setIsLoadingMints(false)\n  };\n\n  const renderMintedItems = () => (\n    <div className=\"gif-container\">\n      <p className=\"sub-text\">Boba Collection</p>\n      <div className=\"gif-grid\">\n        {mints.map((mint) => (\n          <div className=\"gif-item\" key={mint}>\n            <img src={mint} alt={`Minted NFT ${mint}`} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  // Create render function\n  const renderDropTimer = () => {\n    // Get the current date and dropDate in a JavaScript Date object\n    const currentDate = new Date();\n    const dropDate = new Date(machineStats.goLiveData * 1000);\n\n    // If currentDate is before dropDate, render our Countdown component\n    if (currentDate < dropDate) {\n      console.log('Before drop date!');\n      // Don't forget to pass over your dropDate!\n      return <CountdownTimer dropDate={dropDate} />;\n    }\n\n    // Else let's just return the current drop date\n    return <p>{`Drop Date: ${machineStats.goLiveDateTimeString}`}</p>;\n  };\n\n  return (\n    // Only show this if machineStats is available\n    machineStats && (\n      <div className=\"machine-container\">\n        {renderDropTimer()}\n        <p>{`Items Minted: ${machineStats.itemsRedeemed} / ${machineStats.itemsAvailable}`}</p>\n          {/* Check to see if these properties are equal! */}\n          {machineStats.itemsRedeemed === machineStats.itemsAvailable ? (\n            <p className=\"sub-text\">Sold Out 🙊</p>\n          ) : (\n            <button\n              className=\"cta-button mint-button\"\n              onClick={mintToken}\n              disabled={isMinting}\n            >\n              Mint NFT\n            </button>\n          )}\n        {mints.length > 0 && renderMintedItems()}\n        {isLoadingMints && <p>LOADING MINTS...</p>}\n      </div>\n    )\n  );\n};\n\nexport default CandyMachine;\n","import React, { useEffect, useState } from 'react';\nimport './CountdownTimer.css';\n\nconst CountdownTimer = ({ dropDate }) => {\n  // State\n  const [timerString, setTimerString] = useState('');\n\n  // Our useEffect will run on comppnent load\nuseEffect(() => {\n  console.log('Setting interval...');\n  \n  // Use setInterval to run this piece of code every second\n  const interval = setInterval(() => {\n    const currentDate = new Date().getTime();\n    const distance = dropDate - currentDate;\n    \n    // Here it's as easy as doing some time math to get the different properties\n    const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n    const hours = Math.floor(\n      (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n    );\n    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n    \n    // We have our desired output, set it in state!\n    setTimerString(`${days}d ${hours}h ${minutes}m ${seconds}s`);\n    \n    // If our distance passes zero this means that it's drop time!\n    if (distance < 0) {\n      console.log('Clearing interval...');\n      clearInterval(interval);\n    }\n  }, 1000);\n  \n  // Anytime our component unmounts let's clean up our interval\n  return () => {\n    if (interval) {\n      clearInterval(interval);\n    }\n  };\n  // eslint-disable-next-line\n}, []);\n\n  return (\n    <div className=\"timer-container\">\n      <p className=\"timer-header\">Boba Mint Starting In</p>\n      {timerString && <p className=\"timer-value\">{`⏰ ${timerString}`}</p>}\n    </div>\n  );\n};\n\n\nexport default CountdownTimer;","export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport CandyMachine from './CandyMachine';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">It's Boba Time 🧋</p>\n          <p className=\"sub-text\">Mint a boba NFT</p>\n          {!walletAddress && renderNotConnectedContainer()}\n        </div>\n        {/* Check for walletAddress and then pass in walletAddress */}\n      {walletAddress && <CandyMachine walletAddress={window.solana} />}\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { web3 } from '@project-serum/anchor';\n\n// CLI Properties Given to us\nconst candyMachineProgram = new web3.PublicKey(\n  'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ'\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\n);\nexport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n};\n"],"sourceRoot":""}